#!/usr/bin/make

#-------------------------------------------------------------------------------
#
# Makefile for building the images.
#
#-------------------------------------------------------------------------------

# Add supported docker build flags, if specified.
build_opts=
ifneq (${NOCACHE}, )
	build_opts=--no-cache
endif

# Specify the build argument to set a commit hash.
commit_hash_opt=
ifneq ($(shell sh -c "git rev-parse --short HEAD"), )
	commit_hash_opt=--build-arg COMMIT_HASH=$(shell sh -c "git rev-parse --short HEAD")
endif

# Print out help text.
help:
	@echo ""
	@echo "Make targets:"
	@echo "    container"
	@echo ""

# Build the container.
#
# The image tag is generated by parsing the Dockerfile for specific ARG
# parameters. Optionally, environment variables or makefile parameters for
# REGISTRY and ORGANIZATION can be used to override those set in the Dockerfile.
#
# For example:
#     make REGISTRY=foo.com ORGANIZATION=bar java-jdk
#     export REGISTRY=foo.com; make java-jdk
#
container:
	$(eval DIR="container")
	@echo "Building $(DIR)"
	$(eval REG=$(shell sh -c "(test ${REGISTRY} && echo ${REGISTRY}) || grep '^ARG REGISTRY' $(DIR)/Dockerfile | cut -d= -f2"))
	$(eval REG=$(shell sh -c "(test $(REG) && echo $(REG)/)"))
	$(eval ORG=$(shell sh -c "(test ${ORGANIZATION} && echo ${ORGANIZATION}) || grep '^ARG ORGANIZATION' $(DIR)/Dockerfile | cut -d= -f2"))
	$(eval NAME=$(shell sh -c "grep '^ARG APP_NAME' $(DIR)/Dockerfile | cut -d= -f2"))
	$(eval VERS=$(shell sh -c "grep '^ARG APP_VERSION' $(DIR)/Dockerfile | cut -d= -f2"))
	$(eval BUILD=$(shell sh -c "grep '^ARG APP_BUILD_NUMBER' $(DIR)/Dockerfile | cut -d= -f2"))
	$(eval TAG="$(REG)$(ORG)/$(NAME):$(VERS)-$(BUILD)")
	@cd $(DIR) && docker build $(build_opts) $(commit_hash_opt) -t $(TAG) .

.PHONY: container
